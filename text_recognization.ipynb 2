{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import cv2\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "DATADIR='/Users/sukhveersingh/Desktop/final_year/final_year/Hand-written-text-recognizer-master/training_set'\n",
    "CATEGORIES=['A','B','C','D','E','F','G','H','I','J','K','L','M','N']\n",
    "for category in CATEGORIES:\n",
    "    path=os.path.join(DATADIR,category)\n",
    "    for img in os.listdir(path):\n",
    "#         print(os.path.join(path,img))\n",
    "        img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)\n",
    "#         if(category == 'G'):\n",
    "#             plt.imshow(img_array,cmap='gray')\n",
    "#             plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import cv2\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "training_data=[]\n",
    "DATADIR='/Users/sukhveersingh/Desktop/final_year/final_year/Hand-written-text-recognizer-master/training_set'\n",
    "CATEGORIES=['A','B','C','D','E','F','G','H','I','J','K','L','M','N']\n",
    "def create_training_data():\n",
    "    for category in CATEGORIES:\n",
    "        path=os.path.join(DATADIR,category)\n",
    "        class_num=CATEGORIES.index(category)\n",
    "        for img in os.listdir(path):\n",
    "            try:\n",
    "                img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)\n",
    "                ret,thresh=cv2.threshold(img_array,127,255,cv2.THRESH_BINARY)\n",
    "#                 plt.imshow(img_array,cmap='gray')\n",
    "#                 plt.show()\n",
    "                training_data.append([thresh,class_num])\n",
    "            except Exception as e:\n",
    "                pass\n",
    "create_training_data()\n",
    "# print(len(training_data))\n",
    "# print(training_data[7699])\n",
    "# print(training_data[7699][1])\n",
    "cv2.waitKey(0)\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# density of individual character"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[0.24, 0.39, 0.0, 0.61, 0.28, 0.29, 0.19, 0.03, 0.23], 0], [[0.47, 0.27, 0.0, 0.68, 0.32, 0.26, 0.54, 0.0, 0.32], 0], [[0.0, 0.14, 0.0, 0.18, 0.13, 0.15, 0.17, 0.0, 0.07], 0]]\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "density_all=[]\n",
    "# count=0\n",
    "for i in training_data:\n",
    "#     count+=1\n",
    "#     if(count==1):\n",
    "#         plt.imshow(i[0],cmap='gray')\n",
    "#         plt.show()\n",
    "    rows,cols=i[0].shape\n",
    "    \n",
    "    density=[]\n",
    "    r=0\n",
    "    for j in range(3):\n",
    "        c=0\n",
    "        for k in range(3):\n",
    "            patch=i[0][r:r+10,c:c+10]\n",
    "#             if count==1:\n",
    "#                 print(patch)\n",
    "            dark=0\n",
    "            for l in patch:\n",
    "                for m in l:\n",
    "                    if(m==255):\n",
    "                        dark+=1\n",
    "            density.append(dark/(rows//3*cols//3))\n",
    "            c+=10\n",
    "        r+=10\n",
    "    density_all.append([density,i[1]])\n",
    "print(density_all[0:3])           \n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test_data=[]\n",
    "# DATADIR1='/Users/sukhveersingh/Desktop/final_year/Hand-written-text-recognizer-master/test_set'\n",
    "# CATEGORIES1=['A','B','C','D','E','F','G','H','I','J','K','L','M','N']\n",
    "# def create_training_data():\n",
    "#     for category in CATEGORIES:\n",
    "#         path=os.path.join(DATADIR,category)\n",
    "#         class_num=CATEGORIES.index(category)\n",
    "#         for img in os.listdir(path):\n",
    "#             try:\n",
    "#                 img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)\n",
    "#                 ret,thresh=cv2.threshold(img_array,127,255,cv2.THRESH_BINARY)\n",
    "# #                 plt.imshow(img_array,cmap='gray')\n",
    "# #                 plt.show()\n",
    "#                 training_data.append([thresh,class_num])\n",
    "#             except Exception as e:\n",
    "#                 pass\n",
    "# create_training_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 0.14, 0.26, 0.04, 0.37, 0.29, 0.27, 0.04, 0.11]\n",
      "[[0.24, 0.25, 0.26, 0.57, 0.08999999999999996, 0.0, 0.08000000000000003, 0.010000000000000002, 0.12], [0.47000000000000003, 0.13000000000000003, 0.26, 0.6400000000000001, 0.04999999999999998, 0.02999999999999997, 0.2700000000000001, 0.04000000000000001, 0.21000000000000005]]\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "from cmath import sqrt\n",
    "import matplotlib.pyplot as plt\n",
    "img=cv2.imread('/Users/sukhveersingh/Desktop/final_year/final_year/Hand-written-text-recognizer-master/test_set/A/91.jpg',0)\n",
    "ret,thresh=cv2.threshold(img,127,255,cv2.THRESH_BINARY)\n",
    "plt.imshow(thresh,cmap=\"gray\")\n",
    "plt.show()\n",
    "rows,cols=thresh.shape\n",
    "density_1=[]\n",
    "r=0\n",
    "for j in range(3):\n",
    "    c=0\n",
    "    for k in range(3):\n",
    "        patch=thresh[r:r+10,c:c+10]\n",
    "        dark=0\n",
    "        for l in patch:\n",
    "            for m in l:\n",
    "                if(m==255):\n",
    "                    dark+=1\n",
    "        density_1.append(dark/(rows//3*cols//3))\n",
    "        c+=10\n",
    "    r+=10\n",
    "print(density_1)\n",
    "count=0\n",
    "dis=[]\n",
    "for i in density_all:\n",
    "    dis.append([abs(sqrt(a-b)**2) for a,b in zip(i[0],density_1)])\n",
    "print(dis[:2])\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
